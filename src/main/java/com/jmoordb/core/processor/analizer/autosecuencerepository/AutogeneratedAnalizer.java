package com.jmoordb.core.processor.analizer.autosecuencerepository;

import com.jmoordb.core.annotation.autosecuence.Autogenerated;
import com.jmoordb.core.util.JmoordbCoreUtil;
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.util.ProcessorUtil;
import java.util.List;
import javax.annotation.processing.Messager;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;

public class AutogeneratedAnalizer {
// <editor-fold defaultstate="collapsed" desc="fields()">

    private static Integer MAXIMUM_NUMBER_OF_PARAMETERS = 2;
    private static Boolean NAMEOFIDENTIFIER_EQUALS_NAMEOFPARAMETERSOFMETHOD = Boolean.FALSE;
    private Messager messager;
    private static String message = "";

    public Messager getMessager() {
        return messager;
    }

    public void setMessager(Messager messager) {
        this.messager = messager;
    }

    public static String getMessage() {
        return message;
    }

    public static void setMessage(String message) {
        AutogeneratedAnalizer.message = message;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="analizer(ExecutableElement executableElement,TypeMirror typeEntity)">

    public static Boolean analizer(Autogenerated autogeneratedAnnotation, Element element, ExecutableElement executableElement, TypeMirror typeEntity) {
        try {
            String nameOfMethod = ProcessorUtil.nameOfMethod(executableElement);
            String nameOfEntity = ProcessorUtil.nameOfEntity(typeEntity);
            String typeOptional = "java.util.Optional<" + typeEntity.toString().trim() + ">";
            String typeList = "java.util.List<" + typeEntity.toString().trim() + ">";
            Boolean havePaginationParameters = Boolean.FALSE;
            Boolean haveSortedParameters = Boolean.FALSE;

            /**
             *
             */
           

            TypeMirror returnTypeOfMethod = executableElement.getReturnType();
           
            if (!returnTypeOfMethod.toString().equals("java.lang.Long")) {
                message = "Methods " + nameOfMethod + "() The return type must be a Long";
                return Boolean.FALSE;
            }

            List<? extends VariableElement> parameters = executableElement.getParameters();
            /**
             * Se fuerza a que tenga dos parametros
             */
            if (parameters.size() != MAXIMUM_NUMBER_OF_PARAMETERS) {
                message = "Methods " + nameOfMethod + "() the maximum size of parameters allowed is " + MAXIMUM_NUMBER_OF_PARAMETERS;
                return Boolean.FALSE;
            }

            ///public Integer generate(String database, String collection);
            for (int i = 0; i < parameters.size(); i++) {
                VariableElement param = parameters.get(i);

              
                // Verifica que el tipo del parÃ¡metro sea un tipo aceptado
                
                 if (!JmoordbCoreUtil.isJmoordbJavaTypeValid(param.asType().toString())) {
                    message = "Method " + nameOfMethod + "() parameter: " + param.getSimpleName().toString() + " Not a valid data type for a parameter.";
                    return Boolean.FALSE;
                }

                 
                if (!param.asType().toString().equals("java.lang.String")) {
                    message = "Method " + nameOfMethod + "() parameter: " + param.getSimpleName().toString() + " must be of type String.";
                    return Boolean.FALSE;
                }

                if (param.getSimpleName().toString().equals("database") || param.getSimpleName().toString().equals("collection")) {

                } else {
                    message = "Method " + nameOfMethod + "() parameter: " + param.getSimpleName().toString() + " only names are allowed: database or collection.";
                    return Boolean.FALSE;
                }

               
            }

            Autogenerated ping = executableElement.getAnnotation(Autogenerated.class);

            return Boolean.TRUE;
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return Boolean.FALSE;
    }
    // </editor-fold>

}
