package com.jmoordb.core.util;

import com.jmoordb.core.annotation.enumerations.AutogeneratedActive;
import com.jmoordb.core.processor.model.EntityData;
import com.jmoordb.core.processor.model.IdData;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
/**
 *
 * @author avbravo
 */
public class JmoordbCoreFileUtil {
    // <editor-fold defaultstate="collapsed" desc="fields()">

    private static Integer countLine = 0;
    private static Integer countLineId = 0;
    private static Integer countLineEntity = 0;
    private static Boolean lineReaderId = Boolean.FALSE;
    private static Boolean lineReaderEntity = Boolean.FALSE;

    private static Boolean containsId = Boolean.FALSE;
    private static Boolean startId = Boolean.FALSE;
    private static Boolean endId = Boolean.FALSE;
    private static Boolean endpk = Boolean.FALSE;

    private static Integer comaPosition = 0;
    private static Integer valuePosition = 0;
    private static Integer autogeneratedActivePosition = 0;
    private static Integer countLines = 0;
    private static Integer lineaEndId = 0;
    private static Integer lineaIdFound = 0;

// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="String packageOfRepositoryInProject(Element element, EntityData entityData)">
    /**
     * Devuelve el package donde esta ubicado el repositorio
     *
     * @param element
     * @param entityData
     * @return
     */
    public static String packageOfRepositoryInProject(Element element, EntityData entityData) {
        String result = "";
        try {

            final TypeElement classElem = (TypeElement) element;
            final String prefix = System.getProperty("user.dir");
            final String className = classElem.getQualifiedName().toString();
            String fileName = prefix + "/src/main/java/" + className.replace('.', '/') + ".java";

            Path path = Paths.get(fileName);

            Integer pos = path.toAbsolutePath().toString().indexOf(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java");
            String folderBase = path.toAbsolutePath().toString().substring(0, pos + 15);

            try ( Stream<Path> fileList = Files.find(Paths.get(folderBase), Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(entityData.getEntityName() + "Repository.java"))) {
                List<String> someThingNew = fileList.sorted().map(String::valueOf).collect(Collectors.toList());
                if (someThingNew.isEmpty()) {
                    //         System.out.println("\t\t\t [No se encontro el repositorio de la clase]");

                }
                for (String t : someThingNew) {
                    result = t.toString();
                    result = result.substring(pos + 1);

                    result = result.replace(entityData.getEntityName() + "Repository.java", "");
                    result = result.replace(System.getProperty("file.separator"), ".");
                    result = result.replace("src.main.java.", "");
                    t.toString();

                }

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="String packageOfFileProject(Element element, String fileToSearch)">
    /**
     * Devuelve el package donde esta ubicado el repositorio
     *
     * @param element
     * @param entityData
     * @return
     */
    public static String packageOfFileInProject(Element element, String fileToSearch) {
        String result = "";
        try {

            final TypeElement classElem = (TypeElement) element;
            final String prefix = System.getProperty("user.dir");
            final String className = classElem.getQualifiedName().toString();
            String fileName = prefix + "/src/main/java/" + className.replace('.', '/') + ".java";

            Path path = Paths.get(fileName);

            Integer pos = path.toAbsolutePath().toString().indexOf(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java");
            String folderBase = path.toAbsolutePath().toString().substring(0, pos + 15);

            try ( Stream<Path> fileList = Files.find(Paths.get(folderBase), Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(fileToSearch))) {
                List<String> someThingNew = fileList.sorted().map(String::valueOf).collect(Collectors.toList());
                if (someThingNew.isEmpty()) {
                    // System.out.println("\t\t\t [No se encontro el repositorio de la clase]");

                }
                for (String t : someThingNew) {
                    result = t.toString();
                    result = result.substring(pos + 1);

                    result = result.replace(fileToSearch, "");
                    result = result.replace(System.getProperty("file.separator"), ".");
                    result = result.replace("src.main.java.", "");
                    t.toString();

                }

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Boolean existFileRepositoryInProject(Element element, EntityData entityData)">
    /**
     * Verifica si existe el repositorio en cualquier directorio del proyecto
     *
     * @param element
     * @param entityData
     * @return
     */
    public static Boolean existFileRepositoryInProject(Element element, EntityData entityData) {
        Boolean result = Boolean.FALSE;
        try {

            final TypeElement classElem = (TypeElement) element;
            final String prefix = System.getProperty("user.dir");
            final String className = classElem.getQualifiedName().toString();
            String fileName = prefix + "/src/main/java/" + className.replace('.', '/') + ".java";

            Path path = Paths.get(fileName);

            Integer pos = path.toAbsolutePath().toString().indexOf(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java");
            String folderBase = path.toAbsolutePath().toString().substring(0, pos + 15);

            try ( Stream<Path> fileList = Files.find(Paths.get(folderBase), Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(entityData.getEntityName() + "Repository.java"))) {
                List<String> someThingNew = fileList.sorted().map(String::valueOf).collect(Collectors.toList());
                if (someThingNew.isEmpty()) {

                } else {
                    result = Boolean.TRUE;
                }
//                for (String t : someThingNew) {
//                    result = Boolean.TRUE;
//                    t.toString();
//                  }

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Boolean existFileInProject(Element element,String fyleToSearch)">
    /**
     * Verifica si existe un archivo en cualquier directorio
     *
     * @param element
     * @param entityData
     * @return
     */
    public static Boolean existFileInProject(Element element, String fyleToSearch) {
        Boolean result = Boolean.FALSE;
        try {
            System.out.println("[[ fyleToSearch]] " + fyleToSearch);
            final TypeElement classElem = (TypeElement) element;
            final String prefix = System.getProperty("user.dir");
            final String className = classElem.getQualifiedName().toString();
            String fileName = prefix + "/src/main/java/" + className.replace('.', '/') + ".java";

            Path path = Paths.get(fileName);

            Integer pos = path.toAbsolutePath().toString().indexOf(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java");
            String folderBase = path.toAbsolutePath().toString().substring(0, pos + 15);

            try ( Stream<Path> fileList = Files.find(Paths.get(folderBase), Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(fyleToSearch))) {
                List<String> someThingNew = fileList.sorted().map(String::valueOf).collect(Collectors.toList());
                if (someThingNew.isEmpty()) {

                } else {
                    result = Boolean.TRUE;
                }

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }

        return result;
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="String pathOfRepositoryInProject(Element element, EntityData entityData)">
    /**
     * Devuelve la ruta del Repositorio en formato /home/
     *
     * @param element
     * @param entityData
     * @return
     */
    public static String pathOfRepositoryInProject(Element element, EntityData entityData) {
        String result = "";
        try {
            final TypeElement classElem = (TypeElement) element;
            final String prefix = System.getProperty("user.dir");
            final String className = classElem.getQualifiedName().toString();
            String fileName = prefix + "/src/main/java/" + className.replace('.', '/') + ".java";

            Path path = Paths.get(fileName);
            Integer pos = path.toAbsolutePath().toString().indexOf(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java");
            String folderBase = path.toAbsolutePath().toString().substring(0, pos + 15);
            String homeBase = folderBase.replace(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java", "");

            try ( Stream<Path> fileList = Files.find(Paths.get(folderBase), Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(entityData.getEntityName() + "Repository.java"))) {
                List<String> someThingNew = fileList.sorted().map(String::valueOf).collect(Collectors.toList());
                if (someThingNew.isEmpty()) {
                    //         System.out.println("\t\t\t [No se encontro el repositorio de la clase]");

                }
                for (String t : someThingNew) {
                    result = t.toString();
                    result = result.substring(pos + 1);

                    result = result.replace(entityData.getEntityName() + "Repository.java", "");
                    result = homeBase + result;
                }

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="String pathOfFileProject(Element element, String fileToSearch)">
    /**
     * Devuelve la ruta del archivo en el repositorio
     *
     * @param element
     * @param entityData
     * @return
     */
    public static String pathOfFileInProject(Element element, String fileToSearch) {
        String result = "";
        try {

            final TypeElement classElem = (TypeElement) element;
            final String prefix = System.getProperty("user.dir");
            final String className = classElem.getQualifiedName().toString();
            String fileName = prefix + "/src/main/java/" + className.replace('.', '/') + ".java";

            Path path = Paths.get(fileName);
            Integer pos = path.toAbsolutePath().toString().indexOf(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java");
            String folderBase = path.toAbsolutePath().toString().substring(0, pos + 15);
            String homeBase = folderBase.replace(System.getProperty("file.separator") + "src" + System.getProperty("file.separator") + "main" + System.getProperty("file.separator") + "java", "");

            try ( Stream<Path> fileList = Files.find(Paths.get(folderBase), Integer.MAX_VALUE, (filePath, fileAttr) -> fileAttr.isRegularFile() && filePath.toString().endsWith(fileToSearch))) {
                List<String> someThingNew = fileList.sorted().map(String::valueOf).collect(Collectors.toList());
                if (someThingNew.isEmpty()) {
                    // System.out.println("\t\t\t [No se encontro el repositorio de la clase]");

                }
                for (String t : someThingNew) {
                    result = t.toString();
                    result = result.substring(pos + 1);
                    result = result.replace(fileToSearch, "");
                    result = homeBase + result;
                }

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="String readFileContent(Element element, String fileToRead)">
    /**
     * Lee el contenido de un archivo
     *
     * @param fileToRead
     * @return
     */
    public static String readFileContent(Element element, String fileToRead) {
        String result = "";
        try {
            fileToRead = pathOfFileInProject(element, fileToRead) + fileToRead;
            Path path = Paths.get(fileToRead);

            try ( Stream<String> stream = Files.lines(path)) {
                stream.forEach(System.out::println);

            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="readEntityIdAnnotationOfFile(Element element, String fileToRead)">

    /**
     * Lee el contenido de un archivo
     *
     * @param fileToRead
     * @return
     */
    public static IdData readIdAnnotationOfEntityFile(Element element, String fileToRead, IdData idData) {
        IdData result = idData;
        try {
            fileToRead = pathOfFileInProject(element, fileToRead) + fileToRead;
            Path path = Paths.get(fileToRead);
         
            Integer lineEndId = procesarId(Files.lines(path), Files.lines(path), idData);
            if (lineEndId != 0) {
                procesarPK(Files.lines(path), idData, lineEndId);
            }

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="readIdAnnotationOfDocumentEmbeddableFile(Element element, String fileToRead)">

    /**
     * Lee el contenido de un archivo
     *
     * @param fileToRead
     * @return
     */
    public static IdData readIdAnnotationOfDocumentEmbeddableFile(Element element, String fileToRead, IdData idData) {
        IdData result = idData;
        try {
            fileToRead = pathOfFileInProject(element, fileToRead) + fileToRead;
            Path path = Paths.get(fileToRead);

            Integer lineEndId = procesarId(Files.lines(path), Files.lines(path), idData);
            if (lineEndId != 0) {
                procesarPK(Files.lines(path), idData, lineEndId);
            }

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return result;
    }
// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Integer procesarId(String textos, IdData idData)">
    public static Integer procesarId(Stream<String> lines, Stream<String> linesWork, IdData idData) {
        Integer result = 0;
        try {

            containsId = Boolean.FALSE;
            startId = Boolean.FALSE;
            endId = Boolean.FALSE;
            countLines = 0;
            idData.setAutogeneratedActive(AutogeneratedActive.OFF);
            idData.setValue("");

            List<String> javaCode = new ArrayList<>();
            linesWork.forEach(s -> {
                javaCode.add(s);
            });
            lines.forEach(s -> {
               
              

                if (!endId) {
          
                    comaPosition = s.indexOf(",");
                    valuePosition = s.indexOf("value");
                    autogeneratedActivePosition = s.indexOf("autogeneratedActive");

                    if (s.contains("AutogeneratedActive.OFF")) {
                        idData.setAutogeneratedActive(AutogeneratedActive.OFF);
                    } else {
                        if (s.contains("AutogeneratedActive.ON")) {
                            idData.setAutogeneratedActive(AutogeneratedActive.ON);
                        }
                    }
                    if (s.contains("@Id")) {
                        lineaIdFound = countLines;
                        containsId = Boolean.TRUE;
                        if (s.contains("(")) {
                            startId = Boolean.TRUE;
                        }
                        if (s.contains(")")) {
                            endId = Boolean.TRUE;
                            lineaEndId = countLines;
                        }

                        /**
                         * Obtiene el value
                         */
                        if (valuePosition != -1) {
                            Integer startValue = s.indexOf("\"");
                            Integer endValue = s.lastIndexOf("\"");
                            idData.setValue(s.substring(startValue + 1, endValue));

                        }

                        // Contiene @Id() en la misma linea se pueden obtener los valores
                        if (startId && endId) {

                            if (s.contains("value")) {
                                Integer posValue = s.indexOf("value");
                                if (autogeneratedActivePosition > valuePosition) {

                                } else {

                                }

                            }
                        }
                    }//@Id
                    else {

                        if (valuePosition != -1) {
                            Integer startValue = s.indexOf("\"");
                            Integer endValue = s.lastIndexOf("\"");
                            idData.setValue(s.substring(startValue + 1, endValue));
                        }

                        if (s.contains(")")) {
                            endId = Boolean.TRUE;
                            lineaEndId = countLines;

                        }
                    }
                }//endId
                else{
                     
                      if (s.contains("AutogeneratedActive.OFF")) {
                        idData.setAutogeneratedActive(AutogeneratedActive.OFF);
                    } else {
                        if (s.contains("AutogeneratedActive.ON")) {
                            idData.setAutogeneratedActive(AutogeneratedActive.ON);
                        }
                    }
                }

                if ((countLines < (javaCode.size() - 1)) && !endId) {

                    if (containsId && javaCode.get(countLines + 1).contains("String") || javaCode.get(countLines + 1).contains("Long")) {
                        /*
                        Indica que el @Id no tiene ()
                         */
                        endId = Boolean.TRUE;
                        lineaEndId = countLines;

                    }
                }

                countLines++;
            });//forEach
  
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return lineaEndId;
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Integer procesarPK(Stream<String> lines , IdData idData, Integer lineEndId)">
    public static Integer procesarPK(Stream<String> lines, IdData idData, Integer lineEndId) {
        Integer result = 0;
        try {
            endpk = Boolean.FALSE;
            countLines = 0;
            lines.forEach(s -> {
                if (countLines > lineEndId && !endpk) {

                    if (s.contains(";")) {
                        endpk = Boolean.TRUE;
                        s = s.replace(";", "");
                    }
                    if (s.contains("String")) {
                        idData.setFieldType("String");
                        s = s.replace("String", "");
                    } else {
                        if (s.contains("Long")) {
                            idData.setFieldType("Long");
                            s = s.replace("Long", "");
                        }
                    }
                    if (s.contains("private")) {
                        s = s.replace("private", "");
                    }
                    if (s.contains("public")) {
                        s = s.replace("public", "");
                    }
                    if (!s.isEmpty()) {
                        idData.setFieldName(s.trim());
                    }

                }//endId
                countLines++;
            });//forEach

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " error() " + e.getLocalizedMessage());
        }
        return lineaEndId;
    }
    // </editor-fold>

}
